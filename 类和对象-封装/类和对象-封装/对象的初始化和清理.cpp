#include <iostream>
using namespace std;
#include<string>

/*
c++利用了**构造函数**和**析构函数**
解决上述问题，
这两个函数将会被编译器自动调用，
完成对象初始化和清理工作。

**编译器提供的构造函数和析构函数是空实现。**

* 构造函数：
主要作用在于创建对象时为对象的成员属性赋值，
构造函数由编译器自动调用，
无须手动调用。
* 析构函数：
主要作用在于对象**销毁前**系统自动调用，
执行一些清理工作。

**构造函数语法：**`类名(){}`

1. 构造函数，没有返回值也不写void
2. 函数名称与类名相同
3. 构造函数可以有参数，因此可以发生重载
4. 程序在调用对象时候会自动调用构造，
无须手动调用,而且只会调用一次

**析构函数语法：** `~类名(){}`

1. 析构函数，没有返回值也不写void
2. 函数名称与类名相同,在名称前加上符号  ~
3. 析构函数不可以有参数，因此不可以发生重载
4. 程序在对象销毁前会自动调用析构，
无须手动调用,而且只会调用一次
*/
//对象的初始化和清理


class Person {
public:
    //1、构造函数进行初始化操作
    Person()
    {
        cout << "Person 构造函数的调用" << endl;
    }


    //2、析构函数 进行清理的操作
    ~Person() {
        cout << "Person 的析构函数的调用" << endl;
    }


};


//测试
//构造和析构都是必须有的实现，如果自己不提供，
//编译器就会提供一个空实现的构造和析构
void test01() {

    Person p;//对象
}



int main8() {

    test01();
  //  Person p;

    system("pause");
    return 0;
}